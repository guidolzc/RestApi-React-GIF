{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoType","PropTypes","func","isRequired","getGif","category","a","url","encodeURI","fetch","resp","json","data","gift","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","imagenes","GifExpertApp","Categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAuBhD,OAGE,cAFA,CAEA,QAAMC,SAjBY,SAACC,GACnBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAG7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,MAOhB,UACE,kDAAqBD,EAArB,OAEA,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAzBtB,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,cA8B3BZ,EAAYe,UAAY,CACtBd,cAAee,IAAUC,KAAKC,Y,mCC1CnBC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UACpDH,GAFkB,+DAKDI,MAAMF,GALL,cAKdG,EALc,gBAMGA,EAAKC,OANR,uBAMZC,EANY,EAMZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAGrCa,QAAQC,IAAIT,GACZQ,QAAQC,IAAIR,GAfQ,kBAkBbA,GAlBa,4CAAH,sDCENS,G,MAAc,SAAC,GAAwB,IAAtBN,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIvC,OAHAa,QAAQC,IAAI,CAAEL,KAAIC,QAAOV,QAIvB,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,SCJGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCyB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAZAC,qBAAU,WACR1B,EAAOC,GAAU0B,MAAK,SAAChB,GACrBiB,YAAW,WAETH,EAAS,CACPjB,KAAMG,EACNY,SAAS,MAEV,UAEJ,CAACtB,IAEGuB,EDd6BK,CAAa5B,GAAnC6B,EADyB,EAC/BtB,KAAgBe,EADe,EACfA,QAgBxB,OAdAP,QAAQC,IAAIa,GACZd,QAAQC,IAAIM,GAcV,qCACE,6BAAKtB,IACJsB,EAAU,YAAc,eACzB,qBAAKJ,UAAU,YAAf,SACE,mCACGW,EAASpB,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEzBrBmB,EAAe,WAAM,MAEIhD,mBAAS,CAAC,SAFd,mBAEzBiD,EAFyB,KAEblD,EAFa,KAQhC,OACE,qCACE,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEGkD,EAAWtB,KAAI,SAACT,GAAD,OAId,aAHA,CAGC,EAAD,CAAwBA,SAAUA,GAApBA,YCpBxBgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d0b6b866.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// llamo a los props desde aqui cuando pido algo de el principal\r\nimport PropTypes from \"prop-types\";\r\n\r\n// destructurar bien siempre loS PROPS\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [InputValue, setInputValue] = useState(\"\");\r\n\r\n  // para que se pueda escribir y actualizar lo q escribimos\r\n  const handleValue = (e) => {\r\n    setInputValue(e.target.value);\r\n    //console.log(e.target.value);\r\n  };\r\n\r\n  const handleSumit = (e) => {\r\n    e.preventDefault();\r\n    //console.log(\"sumit hecho\");\r\n\r\n    //si ahi mas de 2 letras agregar sino no y no toma encuenta los espacios\r\n    if (InputValue.trim().length > 2) {\r\n      // aqui ponemos el value para q agrege lo q nosotros escribimos\r\n\r\n      setCategories((cats) => [InputValue, ...cats]); //oone en primera posicion la images de\r\n      // al agregar dejamelo vacio\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    //  form para q no haga refresh cada ves q apretamos agregamos onSumit\r\n\r\n    <form onSubmit={handleSumit}>\r\n      <h1> Busqueda GIF : {InputValue} </h1>\r\n      {/* // para escribir en un input usar onchange te avilita  */}\r\n      <input type=\"text\" value={InputValue} onChange={handleValue} />\r\n    </form>\r\n  );\r\n};\r\n\r\n// OBLIGATORIAMENTE VA EL PROTOTYPE\r\nAddCategory.protoType = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGif = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=YnVQoVgKzqS0H4RopWH4kW3UOF6F0ZjY`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gift = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  console.log(data);\r\n  console.log(gift);\r\n\r\n  // aqui paso mi nuevo estado acutalizado de la imagenes API\r\n  return gift;\r\n};\r\n\r\n// a la api le pasamos ENCODEURL = pasa la categoria la busqueda sin espacios\r\n// const getGif = async () => {\r\n//   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n//     category\r\n//   )}&limit=10&api_key=YnVQoVgKzqS0H4RopWH4kW3UOF6F0ZjY`;\r\n\r\n//   const resp = await fetch(url);\r\n//   const { data } = await resp.json();\r\n//   const gift = data.map((img) => {\r\n//     return {\r\n//       id: img.id,\r\n//       title: img.title,\r\n//       url: img.images.downsized_medium.url,\r\n//     };\r\n//   });\r\n//   console.log(data);\r\n//   console.log(gift);\r\n\r\n//   // aqui paso mi nuevo estado acutalizado de la imagenes API\r\n//   setImages(gift);\r\n// };\r\n// getGif();\r\n","import React from \"react\";\r\nimport \"animate.css\";\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log({ id, title, url });\r\n\r\n  // aqui muestro la imagen destructurada desde GIFGRID\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n//import { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: imagenes, loading } = useFetchGifs(category);\r\n\r\n  console.log(imagenes);\r\n  console.log(loading);\r\n  // suma cuando hace click\r\n  //const [count, setCount] = useState(0);\r\n\r\n  // // toma las imagenes en el setimagenes\r\n  // const [images, setImages] = useState([]);\r\n\r\n  // // ejecuta una sola //vez separamos de la suma del usestate\r\n  // useEffect(() => {\r\n  //   //getGif(category).then((imgs) => setImages(imgs));\r\n  //   getGif(category).then(setImages);\r\n  // }, [category]); // ponemos un array vacio se dispara 1 vez por cada busqueda = categoria para q busque solo cuando buscamos\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading ? \"cargando \" : \"data cargada\"}\r\n      <div className=\"card-grid\">\r\n        <>\r\n          {imagenes.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </>\r\n        {/* <h3>{count}</h3>\r\n      <button onClick={() => setCount(count + 1)}></button> */}\r\n\r\n        {/* <ol>\r\n          <hr /> */}\r\n        {/* // aqui destructuramos las images para leer el GIFT */}\r\n        {/* /* {images.map(({ id, title }) => (\r\n            <li key={id}>{title}</li>\r\n          ))}\r\n        </ol>\r\n        <>\r\n          <hr />\r\n          <ol>\r\n            {images.map((img) => (\r\n              <li key={img.id}>\r\n                {img.id}\r\n                {img.title}\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGif(category).then((img) => {\r\n      setTimeout(() => {\r\n        // console.log(img);\r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n  const [Categories, setCategories] = useState([\"cafe\"]);\r\n  // const handleAdd = () => {\r\n  //   // copio el array y agrego uno nuevo aqui iria el value\r\n  //   setCategories((cats) => [...Categories, \"HunterX\"]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2> GifExpertApp </h2>\r\n      {/* // mandamos setcategories por medio de los PROPS */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {/*  <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {/* // entramos al map y entramos dentro d la array con key , categoria */}\r\n        {Categories.map((category) => (\r\n          //return <li key={category}>{category}</li>;\r\n\r\n          // mandamos category por medio de los PROPS\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}